// Code generated by counterfeiter. DO NOT EDIT.
package secretsmanagerfakes

import (
	"sync"

	secretsmanagera "github.com/aws/aws-sdk-go/service/secretsmanager"
	"github.com/telia-oss/sidecred/store/secretsmanager"
)

type FakeSecretsManagerAPI struct {
	CreateSecretStub        func(*secretsmanagera.CreateSecretInput) (*secretsmanagera.CreateSecretOutput, error)
	createSecretMutex       sync.RWMutex
	createSecretArgsForCall []struct {
		arg1 *secretsmanagera.CreateSecretInput
	}
	createSecretReturns struct {
		result1 *secretsmanagera.CreateSecretOutput
		result2 error
	}
	createSecretReturnsOnCall map[int]struct {
		result1 *secretsmanagera.CreateSecretOutput
		result2 error
	}
	DeleteSecretStub        func(*secretsmanagera.DeleteSecretInput) (*secretsmanagera.DeleteSecretOutput, error)
	deleteSecretMutex       sync.RWMutex
	deleteSecretArgsForCall []struct {
		arg1 *secretsmanagera.DeleteSecretInput
	}
	deleteSecretReturns struct {
		result1 *secretsmanagera.DeleteSecretOutput
		result2 error
	}
	deleteSecretReturnsOnCall map[int]struct {
		result1 *secretsmanagera.DeleteSecretOutput
		result2 error
	}
	GetSecretValueStub        func(*secretsmanagera.GetSecretValueInput) (*secretsmanagera.GetSecretValueOutput, error)
	getSecretValueMutex       sync.RWMutex
	getSecretValueArgsForCall []struct {
		arg1 *secretsmanagera.GetSecretValueInput
	}
	getSecretValueReturns struct {
		result1 *secretsmanagera.GetSecretValueOutput
		result2 error
	}
	getSecretValueReturnsOnCall map[int]struct {
		result1 *secretsmanagera.GetSecretValueOutput
		result2 error
	}
	UpdateSecretStub        func(*secretsmanagera.UpdateSecretInput) (*secretsmanagera.UpdateSecretOutput, error)
	updateSecretMutex       sync.RWMutex
	updateSecretArgsForCall []struct {
		arg1 *secretsmanagera.UpdateSecretInput
	}
	updateSecretReturns struct {
		result1 *secretsmanagera.UpdateSecretOutput
		result2 error
	}
	updateSecretReturnsOnCall map[int]struct {
		result1 *secretsmanagera.UpdateSecretOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretsManagerAPI) CreateSecret(arg1 *secretsmanagera.CreateSecretInput) (*secretsmanagera.CreateSecretOutput, error) {
	fake.createSecretMutex.Lock()
	ret, specificReturn := fake.createSecretReturnsOnCall[len(fake.createSecretArgsForCall)]
	fake.createSecretArgsForCall = append(fake.createSecretArgsForCall, struct {
		arg1 *secretsmanagera.CreateSecretInput
	}{arg1})
	stub := fake.CreateSecretStub
	fakeReturns := fake.createSecretReturns
	fake.recordInvocation("CreateSecret", []interface{}{arg1})
	fake.createSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretsManagerAPI) CreateSecretCallCount() int {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return len(fake.createSecretArgsForCall)
}

func (fake *FakeSecretsManagerAPI) CreateSecretCalls(stub func(*secretsmanagera.CreateSecretInput) (*secretsmanagera.CreateSecretOutput, error)) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = stub
}

func (fake *FakeSecretsManagerAPI) CreateSecretArgsForCall(i int) *secretsmanagera.CreateSecretInput {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	argsForCall := fake.createSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretsManagerAPI) CreateSecretReturns(result1 *secretsmanagera.CreateSecretOutput, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	fake.createSecretReturns = struct {
		result1 *secretsmanagera.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) CreateSecretReturnsOnCall(i int, result1 *secretsmanagera.CreateSecretOutput, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	if fake.createSecretReturnsOnCall == nil {
		fake.createSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanagera.CreateSecretOutput
			result2 error
		})
	}
	fake.createSecretReturnsOnCall[i] = struct {
		result1 *secretsmanagera.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) DeleteSecret(arg1 *secretsmanagera.DeleteSecretInput) (*secretsmanagera.DeleteSecretOutput, error) {
	fake.deleteSecretMutex.Lock()
	ret, specificReturn := fake.deleteSecretReturnsOnCall[len(fake.deleteSecretArgsForCall)]
	fake.deleteSecretArgsForCall = append(fake.deleteSecretArgsForCall, struct {
		arg1 *secretsmanagera.DeleteSecretInput
	}{arg1})
	stub := fake.DeleteSecretStub
	fakeReturns := fake.deleteSecretReturns
	fake.recordInvocation("DeleteSecret", []interface{}{arg1})
	fake.deleteSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretsManagerAPI) DeleteSecretCallCount() int {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	return len(fake.deleteSecretArgsForCall)
}

func (fake *FakeSecretsManagerAPI) DeleteSecretCalls(stub func(*secretsmanagera.DeleteSecretInput) (*secretsmanagera.DeleteSecretOutput, error)) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = stub
}

func (fake *FakeSecretsManagerAPI) DeleteSecretArgsForCall(i int) *secretsmanagera.DeleteSecretInput {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	argsForCall := fake.deleteSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretsManagerAPI) DeleteSecretReturns(result1 *secretsmanagera.DeleteSecretOutput, result2 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	fake.deleteSecretReturns = struct {
		result1 *secretsmanagera.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) DeleteSecretReturnsOnCall(i int, result1 *secretsmanagera.DeleteSecretOutput, result2 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	if fake.deleteSecretReturnsOnCall == nil {
		fake.deleteSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanagera.DeleteSecretOutput
			result2 error
		})
	}
	fake.deleteSecretReturnsOnCall[i] = struct {
		result1 *secretsmanagera.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) GetSecretValue(arg1 *secretsmanagera.GetSecretValueInput) (*secretsmanagera.GetSecretValueOutput, error) {
	fake.getSecretValueMutex.Lock()
	ret, specificReturn := fake.getSecretValueReturnsOnCall[len(fake.getSecretValueArgsForCall)]
	fake.getSecretValueArgsForCall = append(fake.getSecretValueArgsForCall, struct {
		arg1 *secretsmanagera.GetSecretValueInput
	}{arg1})
	stub := fake.GetSecretValueStub
	fakeReturns := fake.getSecretValueReturns
	fake.recordInvocation("GetSecretValue", []interface{}{arg1})
	fake.getSecretValueMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretsManagerAPI) GetSecretValueCallCount() int {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	return len(fake.getSecretValueArgsForCall)
}

func (fake *FakeSecretsManagerAPI) GetSecretValueCalls(stub func(*secretsmanagera.GetSecretValueInput) (*secretsmanagera.GetSecretValueOutput, error)) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = stub
}

func (fake *FakeSecretsManagerAPI) GetSecretValueArgsForCall(i int) *secretsmanagera.GetSecretValueInput {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	argsForCall := fake.getSecretValueArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretsManagerAPI) GetSecretValueReturns(result1 *secretsmanagera.GetSecretValueOutput, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	fake.getSecretValueReturns = struct {
		result1 *secretsmanagera.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) GetSecretValueReturnsOnCall(i int, result1 *secretsmanagera.GetSecretValueOutput, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	if fake.getSecretValueReturnsOnCall == nil {
		fake.getSecretValueReturnsOnCall = make(map[int]struct {
			result1 *secretsmanagera.GetSecretValueOutput
			result2 error
		})
	}
	fake.getSecretValueReturnsOnCall[i] = struct {
		result1 *secretsmanagera.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) UpdateSecret(arg1 *secretsmanagera.UpdateSecretInput) (*secretsmanagera.UpdateSecretOutput, error) {
	fake.updateSecretMutex.Lock()
	ret, specificReturn := fake.updateSecretReturnsOnCall[len(fake.updateSecretArgsForCall)]
	fake.updateSecretArgsForCall = append(fake.updateSecretArgsForCall, struct {
		arg1 *secretsmanagera.UpdateSecretInput
	}{arg1})
	stub := fake.UpdateSecretStub
	fakeReturns := fake.updateSecretReturns
	fake.recordInvocation("UpdateSecret", []interface{}{arg1})
	fake.updateSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretsManagerAPI) UpdateSecretCallCount() int {
	fake.updateSecretMutex.RLock()
	defer fake.updateSecretMutex.RUnlock()
	return len(fake.updateSecretArgsForCall)
}

func (fake *FakeSecretsManagerAPI) UpdateSecretCalls(stub func(*secretsmanagera.UpdateSecretInput) (*secretsmanagera.UpdateSecretOutput, error)) {
	fake.updateSecretMutex.Lock()
	defer fake.updateSecretMutex.Unlock()
	fake.UpdateSecretStub = stub
}

func (fake *FakeSecretsManagerAPI) UpdateSecretArgsForCall(i int) *secretsmanagera.UpdateSecretInput {
	fake.updateSecretMutex.RLock()
	defer fake.updateSecretMutex.RUnlock()
	argsForCall := fake.updateSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecretsManagerAPI) UpdateSecretReturns(result1 *secretsmanagera.UpdateSecretOutput, result2 error) {
	fake.updateSecretMutex.Lock()
	defer fake.updateSecretMutex.Unlock()
	fake.UpdateSecretStub = nil
	fake.updateSecretReturns = struct {
		result1 *secretsmanagera.UpdateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) UpdateSecretReturnsOnCall(i int, result1 *secretsmanagera.UpdateSecretOutput, result2 error) {
	fake.updateSecretMutex.Lock()
	defer fake.updateSecretMutex.Unlock()
	fake.UpdateSecretStub = nil
	if fake.updateSecretReturnsOnCall == nil {
		fake.updateSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanagera.UpdateSecretOutput
			result2 error
		})
	}
	fake.updateSecretReturnsOnCall[i] = struct {
		result1 *secretsmanagera.UpdateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManagerAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	fake.updateSecretMutex.RLock()
	defer fake.updateSecretMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretsManagerAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ secretsmanager.SecretsManagerAPI = new(FakeSecretsManagerAPI)
