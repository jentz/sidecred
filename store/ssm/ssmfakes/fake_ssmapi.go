// Code generated by counterfeiter. DO NOT EDIT.
package ssmfakes

import (
	"sync"

	ssma "github.com/aws/aws-sdk-go/service/ssm"
	"github.com/telia-oss/sidecred/store/ssm"
)

type FakeSSMAPI struct {
	DeleteParameterStub        func(*ssma.DeleteParameterInput) (*ssma.DeleteParameterOutput, error)
	deleteParameterMutex       sync.RWMutex
	deleteParameterArgsForCall []struct {
		arg1 *ssma.DeleteParameterInput
	}
	deleteParameterReturns struct {
		result1 *ssma.DeleteParameterOutput
		result2 error
	}
	deleteParameterReturnsOnCall map[int]struct {
		result1 *ssma.DeleteParameterOutput
		result2 error
	}
	GetParameterStub        func(*ssma.GetParameterInput) (*ssma.GetParameterOutput, error)
	getParameterMutex       sync.RWMutex
	getParameterArgsForCall []struct {
		arg1 *ssma.GetParameterInput
	}
	getParameterReturns struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}
	getParameterReturnsOnCall map[int]struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}
	PutParameterStub        func(*ssma.PutParameterInput) (*ssma.PutParameterOutput, error)
	putParameterMutex       sync.RWMutex
	putParameterArgsForCall []struct {
		arg1 *ssma.PutParameterInput
	}
	putParameterReturns struct {
		result1 *ssma.PutParameterOutput
		result2 error
	}
	putParameterReturnsOnCall map[int]struct {
		result1 *ssma.PutParameterOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSMAPI) DeleteParameter(arg1 *ssma.DeleteParameterInput) (*ssma.DeleteParameterOutput, error) {
	fake.deleteParameterMutex.Lock()
	ret, specificReturn := fake.deleteParameterReturnsOnCall[len(fake.deleteParameterArgsForCall)]
	fake.deleteParameterArgsForCall = append(fake.deleteParameterArgsForCall, struct {
		arg1 *ssma.DeleteParameterInput
	}{arg1})
	stub := fake.DeleteParameterStub
	fakeReturns := fake.deleteParameterReturns
	fake.recordInvocation("DeleteParameter", []interface{}{arg1})
	fake.deleteParameterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMAPI) DeleteParameterCallCount() int {
	fake.deleteParameterMutex.RLock()
	defer fake.deleteParameterMutex.RUnlock()
	return len(fake.deleteParameterArgsForCall)
}

func (fake *FakeSSMAPI) DeleteParameterCalls(stub func(*ssma.DeleteParameterInput) (*ssma.DeleteParameterOutput, error)) {
	fake.deleteParameterMutex.Lock()
	defer fake.deleteParameterMutex.Unlock()
	fake.DeleteParameterStub = stub
}

func (fake *FakeSSMAPI) DeleteParameterArgsForCall(i int) *ssma.DeleteParameterInput {
	fake.deleteParameterMutex.RLock()
	defer fake.deleteParameterMutex.RUnlock()
	argsForCall := fake.deleteParameterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMAPI) DeleteParameterReturns(result1 *ssma.DeleteParameterOutput, result2 error) {
	fake.deleteParameterMutex.Lock()
	defer fake.deleteParameterMutex.Unlock()
	fake.DeleteParameterStub = nil
	fake.deleteParameterReturns = struct {
		result1 *ssma.DeleteParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMAPI) DeleteParameterReturnsOnCall(i int, result1 *ssma.DeleteParameterOutput, result2 error) {
	fake.deleteParameterMutex.Lock()
	defer fake.deleteParameterMutex.Unlock()
	fake.DeleteParameterStub = nil
	if fake.deleteParameterReturnsOnCall == nil {
		fake.deleteParameterReturnsOnCall = make(map[int]struct {
			result1 *ssma.DeleteParameterOutput
			result2 error
		})
	}
	fake.deleteParameterReturnsOnCall[i] = struct {
		result1 *ssma.DeleteParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMAPI) GetParameter(arg1 *ssma.GetParameterInput) (*ssma.GetParameterOutput, error) {
	fake.getParameterMutex.Lock()
	ret, specificReturn := fake.getParameterReturnsOnCall[len(fake.getParameterArgsForCall)]
	fake.getParameterArgsForCall = append(fake.getParameterArgsForCall, struct {
		arg1 *ssma.GetParameterInput
	}{arg1})
	stub := fake.GetParameterStub
	fakeReturns := fake.getParameterReturns
	fake.recordInvocation("GetParameter", []interface{}{arg1})
	fake.getParameterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMAPI) GetParameterCallCount() int {
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	return len(fake.getParameterArgsForCall)
}

func (fake *FakeSSMAPI) GetParameterCalls(stub func(*ssma.GetParameterInput) (*ssma.GetParameterOutput, error)) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = stub
}

func (fake *FakeSSMAPI) GetParameterArgsForCall(i int) *ssma.GetParameterInput {
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	argsForCall := fake.getParameterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMAPI) GetParameterReturns(result1 *ssma.GetParameterOutput, result2 error) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = nil
	fake.getParameterReturns = struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMAPI) GetParameterReturnsOnCall(i int, result1 *ssma.GetParameterOutput, result2 error) {
	fake.getParameterMutex.Lock()
	defer fake.getParameterMutex.Unlock()
	fake.GetParameterStub = nil
	if fake.getParameterReturnsOnCall == nil {
		fake.getParameterReturnsOnCall = make(map[int]struct {
			result1 *ssma.GetParameterOutput
			result2 error
		})
	}
	fake.getParameterReturnsOnCall[i] = struct {
		result1 *ssma.GetParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMAPI) PutParameter(arg1 *ssma.PutParameterInput) (*ssma.PutParameterOutput, error) {
	fake.putParameterMutex.Lock()
	ret, specificReturn := fake.putParameterReturnsOnCall[len(fake.putParameterArgsForCall)]
	fake.putParameterArgsForCall = append(fake.putParameterArgsForCall, struct {
		arg1 *ssma.PutParameterInput
	}{arg1})
	stub := fake.PutParameterStub
	fakeReturns := fake.putParameterReturns
	fake.recordInvocation("PutParameter", []interface{}{arg1})
	fake.putParameterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSMAPI) PutParameterCallCount() int {
	fake.putParameterMutex.RLock()
	defer fake.putParameterMutex.RUnlock()
	return len(fake.putParameterArgsForCall)
}

func (fake *FakeSSMAPI) PutParameterCalls(stub func(*ssma.PutParameterInput) (*ssma.PutParameterOutput, error)) {
	fake.putParameterMutex.Lock()
	defer fake.putParameterMutex.Unlock()
	fake.PutParameterStub = stub
}

func (fake *FakeSSMAPI) PutParameterArgsForCall(i int) *ssma.PutParameterInput {
	fake.putParameterMutex.RLock()
	defer fake.putParameterMutex.RUnlock()
	argsForCall := fake.putParameterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSMAPI) PutParameterReturns(result1 *ssma.PutParameterOutput, result2 error) {
	fake.putParameterMutex.Lock()
	defer fake.putParameterMutex.Unlock()
	fake.PutParameterStub = nil
	fake.putParameterReturns = struct {
		result1 *ssma.PutParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMAPI) PutParameterReturnsOnCall(i int, result1 *ssma.PutParameterOutput, result2 error) {
	fake.putParameterMutex.Lock()
	defer fake.putParameterMutex.Unlock()
	fake.PutParameterStub = nil
	if fake.putParameterReturnsOnCall == nil {
		fake.putParameterReturnsOnCall = make(map[int]struct {
			result1 *ssma.PutParameterOutput
			result2 error
		})
	}
	fake.putParameterReturnsOnCall[i] = struct {
		result1 *ssma.PutParameterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSMAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteParameterMutex.RLock()
	defer fake.deleteParameterMutex.RUnlock()
	fake.getParameterMutex.RLock()
	defer fake.getParameterMutex.RUnlock()
	fake.putParameterMutex.RLock()
	defer fake.putParameterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSMAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ssm.SSMAPI = new(FakeSSMAPI)
