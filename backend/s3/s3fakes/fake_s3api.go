// Code generated by counterfeiter. DO NOT EDIT.
package s3fakes

import (
	"sync"

	s3a "github.com/aws/aws-sdk-go/service/s3"
	"github.com/telia-oss/sidecred/backend/s3"
)

type FakeS3API struct {
	GetObjectStub        func(*s3a.GetObjectInput) (*s3a.GetObjectOutput, error)
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
		arg1 *s3a.GetObjectInput
	}
	getObjectReturns struct {
		result1 *s3a.GetObjectOutput
		result2 error
	}
	getObjectReturnsOnCall map[int]struct {
		result1 *s3a.GetObjectOutput
		result2 error
	}
	PutObjectStub        func(*s3a.PutObjectInput) (*s3a.PutObjectOutput, error)
	putObjectMutex       sync.RWMutex
	putObjectArgsForCall []struct {
		arg1 *s3a.PutObjectInput
	}
	putObjectReturns struct {
		result1 *s3a.PutObjectOutput
		result2 error
	}
	putObjectReturnsOnCall map[int]struct {
		result1 *s3a.PutObjectOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeS3API) GetObject(arg1 *s3a.GetObjectInput) (*s3a.GetObjectOutput, error) {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
		arg1 *s3a.GetObjectInput
	}{arg1})
	stub := fake.GetObjectStub
	fakeReturns := fake.getObjectReturns
	fake.recordInvocation("GetObject", []interface{}{arg1})
	fake.getObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *FakeS3API) GetObjectCalls(stub func(*s3a.GetObjectInput) (*s3a.GetObjectOutput, error)) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *FakeS3API) GetObjectArgsForCall(i int) *s3a.GetObjectInput {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	argsForCall := fake.getObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) GetObjectReturns(result1 *s3a.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 *s3a.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) GetObjectReturnsOnCall(i int, result1 *s3a.GetObjectOutput, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 *s3a.GetObjectOutput
			result2 error
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 *s3a.GetObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObject(arg1 *s3a.PutObjectInput) (*s3a.PutObjectOutput, error) {
	fake.putObjectMutex.Lock()
	ret, specificReturn := fake.putObjectReturnsOnCall[len(fake.putObjectArgsForCall)]
	fake.putObjectArgsForCall = append(fake.putObjectArgsForCall, struct {
		arg1 *s3a.PutObjectInput
	}{arg1})
	stub := fake.PutObjectStub
	fakeReturns := fake.putObjectReturns
	fake.recordInvocation("PutObject", []interface{}{arg1})
	fake.putObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3API) PutObjectCallCount() int {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return len(fake.putObjectArgsForCall)
}

func (fake *FakeS3API) PutObjectCalls(stub func(*s3a.PutObjectInput) (*s3a.PutObjectOutput, error)) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = stub
}

func (fake *FakeS3API) PutObjectArgsForCall(i int) *s3a.PutObjectInput {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	argsForCall := fake.putObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeS3API) PutObjectReturns(result1 *s3a.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	fake.putObjectReturns = struct {
		result1 *s3a.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) PutObjectReturnsOnCall(i int, result1 *s3a.PutObjectOutput, result2 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	if fake.putObjectReturnsOnCall == nil {
		fake.putObjectReturnsOnCall = make(map[int]struct {
			result1 *s3a.PutObjectOutput
			result2 error
		})
	}
	fake.putObjectReturnsOnCall[i] = struct {
		result1 *s3a.PutObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3API) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeS3API) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ s3.S3API = new(FakeS3API)
