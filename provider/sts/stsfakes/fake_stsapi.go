// Code generated by counterfeiter. DO NOT EDIT.
package stsfakes

import (
	"sync"

	stsa "github.com/aws/aws-sdk-go/service/sts"
	"github.com/telia-oss/sidecred/provider/sts"
)

type FakeSTSAPI struct {
	AssumeRoleStub        func(*stsa.AssumeRoleInput) (*stsa.AssumeRoleOutput, error)
	assumeRoleMutex       sync.RWMutex
	assumeRoleArgsForCall []struct {
		arg1 *stsa.AssumeRoleInput
	}
	assumeRoleReturns struct {
		result1 *stsa.AssumeRoleOutput
		result2 error
	}
	assumeRoleReturnsOnCall map[int]struct {
		result1 *stsa.AssumeRoleOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSTSAPI) AssumeRole(arg1 *stsa.AssumeRoleInput) (*stsa.AssumeRoleOutput, error) {
	fake.assumeRoleMutex.Lock()
	ret, specificReturn := fake.assumeRoleReturnsOnCall[len(fake.assumeRoleArgsForCall)]
	fake.assumeRoleArgsForCall = append(fake.assumeRoleArgsForCall, struct {
		arg1 *stsa.AssumeRoleInput
	}{arg1})
	stub := fake.AssumeRoleStub
	fakeReturns := fake.assumeRoleReturns
	fake.recordInvocation("AssumeRole", []interface{}{arg1})
	fake.assumeRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSTSAPI) AssumeRoleCallCount() int {
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	return len(fake.assumeRoleArgsForCall)
}

func (fake *FakeSTSAPI) AssumeRoleCalls(stub func(*stsa.AssumeRoleInput) (*stsa.AssumeRoleOutput, error)) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = stub
}

func (fake *FakeSTSAPI) AssumeRoleArgsForCall(i int) *stsa.AssumeRoleInput {
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	argsForCall := fake.assumeRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSTSAPI) AssumeRoleReturns(result1 *stsa.AssumeRoleOutput, result2 error) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = nil
	fake.assumeRoleReturns = struct {
		result1 *stsa.AssumeRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSTSAPI) AssumeRoleReturnsOnCall(i int, result1 *stsa.AssumeRoleOutput, result2 error) {
	fake.assumeRoleMutex.Lock()
	defer fake.assumeRoleMutex.Unlock()
	fake.AssumeRoleStub = nil
	if fake.assumeRoleReturnsOnCall == nil {
		fake.assumeRoleReturnsOnCall = make(map[int]struct {
			result1 *stsa.AssumeRoleOutput
			result2 error
		})
	}
	fake.assumeRoleReturnsOnCall[i] = struct {
		result1 *stsa.AssumeRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSTSAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assumeRoleMutex.RLock()
	defer fake.assumeRoleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSTSAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sts.STSAPI = new(FakeSTSAPI)
